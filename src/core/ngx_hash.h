
/*
 * Copyright (C) Igor Sysoev
 * Copyright (C) Nginx, Inc.
 */


#ifndef _NGX_HASH_H_INCLUDED_
#define _NGX_HASH_H_INCLUDED_


#include <ngx_config.h>
#include <ngx_core.h>

// 构建好哈希表之后就不能插入与删除，该链表采用的不是开链法
// 哈希表的元素存储在连续的内存数组中，将内存划分给每个桶管
// 理
// 内存结构参考http://blog.csdn.net/chen19870707/article/details/40794285


// 插入哈希表的元素
typedef struct {
    void             *value;
    u_short           len; // name长度
    u_char            name[1];
} ngx_hash_elt_t;


typedef struct {
    ngx_hash_elt_t  **buckets; // 桶数组
    ngx_uint_t        size; // 桶数量
} ngx_hash_t;


typedef struct {
    ngx_hash_t        hash;
    void             *value;
} ngx_hash_wildcard_t;

// 哈希表元素键/值对，初始化的时候使用
typedef struct {
    ngx_str_t         key;
    ngx_uint_t        key_hash; // 通过key计算好的哈希值，通过求余的方式知道存放在哪个桶当中国
    void             *value;
} ngx_hash_key_t;


typedef ngx_uint_t (*ngx_hash_key_pt) (u_char *data, size_t len);


typedef struct {
    ngx_hash_t            hash;
    ngx_hash_wildcard_t  *wc_head;
    ngx_hash_wildcard_t  *wc_tail;
} ngx_hash_combined_t;
/*
hash:	该字段如果为NULL，那么调用完初始化函数后，
该字段指向新创建出来的hash表。如果该字段不为NULL，
那么在初始的时候，所有的数据被插入了这个字段所指的hash表中。

key:	指向从字符串生成hash值的hash函数。
nginx的源代码中提供了默认的实现函数ngx_hash_key_lc。

max_size:	hash表中的桶的个数。该字段越大，
元素存储时冲突的可能性越小，每个桶中存储的元素会更少，
则查询起来的速度更快。当然，这个值越大，越造成内存的浪
费也越大，(实际上也浪费不了多少)。

bucket_size:	每个桶的最大限制大小，单位是字节。
如果在初始化一个hash表的时候，发现某个桶里
面无法存的下所有属于该桶的元素，则hash表初始化失败。

name:	该hash表的名字。

pool:	该hash表分配内存使用的pool。

temp_pool:	该hash表使用的临时pool，在初始化完成以后，
该pool可以被释放和销毁掉
*/

typedef struct {
	// 哈希桶结构
    ngx_hash_t       *hash;
	// hash函数指针
    ngx_hash_key_pt   key;
	// 桶的数量
    ngx_uint_t        max_size;
	// 每个桶元素大小
    ngx_uint_t        bucket_size;
	// 哈希表的名称，用于日志输出
    char             *name;
	// 分配内存池
    ngx_pool_t       *pool;
	// 临时内存池，用于初始化
    ngx_pool_t       *temp_pool;
} ngx_hash_init_t;


#define NGX_HASH_SMALL            1
#define NGX_HASH_LARGE            2

#define NGX_HASH_LARGE_ASIZE      16384
#define NGX_HASH_LARGE_HSIZE      10007

#define NGX_HASH_WILDCARD_KEY     1
#define NGX_HASH_READONLY_KEY     2


typedef struct {
    ngx_uint_t        hsize;

    ngx_pool_t       *pool;
    ngx_pool_t       *temp_pool;

    ngx_array_t       keys;
    ngx_array_t      *keys_hash;

    ngx_array_t       dns_wc_head;
    ngx_array_t      *dns_wc_head_hash;

    ngx_array_t       dns_wc_tail;
    ngx_array_t      *dns_wc_tail_hash;
} ngx_hash_keys_arrays_t;


typedef struct {
    ngx_uint_t        hash;
    ngx_str_t         key;
    ngx_str_t         value;
    u_char           *lowcase_key;
} ngx_table_elt_t;


void *ngx_hash_find(ngx_hash_t *hash, ngx_uint_t key, u_char *name, size_t len);
void *ngx_hash_find_wc_head(ngx_hash_wildcard_t *hwc, u_char *name, size_t len);
void *ngx_hash_find_wc_tail(ngx_hash_wildcard_t *hwc, u_char *name, size_t len);
void *ngx_hash_find_combined(ngx_hash_combined_t *hash, ngx_uint_t key,
    u_char *name, size_t len);

ngx_int_t ngx_hash_init(ngx_hash_init_t *hinit, ngx_hash_key_t *names,
    ngx_uint_t nelts);
ngx_int_t ngx_hash_wildcard_init(ngx_hash_init_t *hinit, ngx_hash_key_t *names,
    ngx_uint_t nelts);

#define ngx_hash(key, c)   ((ngx_uint_t) key * 31 + c)
ngx_uint_t ngx_hash_key(u_char *data, size_t len);
ngx_uint_t ngx_hash_key_lc(u_char *data, size_t len);
ngx_uint_t ngx_hash_strlow(u_char *dst, u_char *src, size_t n);


ngx_int_t ngx_hash_keys_array_init(ngx_hash_keys_arrays_t *ha, ngx_uint_t type);
ngx_int_t ngx_hash_add_key(ngx_hash_keys_arrays_t *ha, ngx_str_t *key,
    void *value, ngx_uint_t flags);


#endif /* _NGX_HASH_H_INCLUDED_ */
